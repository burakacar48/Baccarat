#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Veritabanı Yöneticisi
---------------------
Veritabanı işlemlerini yönetir, sonuçları kaydeder ve sorgular.
"""

import os
import logging
import sqlite3
import threading
from datetime import datetime
import json

logger = logging.getLogger(__name__)

class DatabaseManager:
    """
    Veritabanı işlemlerini yöneten thread-safe sınıf
    
    SQLite veritabanını kullanarak oyun sonuçlarını, tahminleri ve
    algoritma performanslarını depolar ve yönetir.
    """
    
    def __init__(self, db_uri):
        """
        DatabaseManager sınıfını başlatır
        
        Args:
            db_uri (str): Veritabanı bağlantı URI'si
        """
        self.db_uri = db_uri
        self._local = threading.local()  # Thread-local storage
        
        # Veritabanı klasörünün varlığını kontrol et
        db_dir = os.path.dirname(db_uri)
        if db_dir and not os.path.exists(db_dir):
            os.makedirs(db_dir)
            logger.info(f"Veritabanı dizini oluşturuldu: {db_dir}")
    
    def _get_connection(self):
        """
        Thread-local veritabanı bağlantısını sağlar
        
        Returns:
            sqlite3.Connection: Veritabanı bağlantısı
        """
        if not hasattr(self._local, 'connection'):
            self._local.connection = sqlite3.connect(self.db_uri)
            self._local.connection.row_factory = sqlite3.Row  # Sütun adlarıyla erişim için
        return self._local.connection
    
    def connect(self):
        """
        Veritabanına bağlantı kurar ve gerekli tabloları oluşturur
        
        Returns:
            bool: Bağlantı başarılı ise True, değilse False
        """
        try:
            connection = self._get_connection()
            cursor = connection.cursor()
            
            # Tabloları oluştur
            self._create_tables(cursor)
            
            connection.commit()
            logger.info(f"Veritabanı bağlantısı kuruldu: {self.db_uri}")
            return True
        except sqlite3.Error as e:
            logger.error(f"Veritabanı bağlantı hatası: {str(e)}")
            return False
    
    def _create_tables(self, cursor):
        """
        Gerekli veritabanı tablolarını oluşturur
        
        Args:
            cursor (sqlite3.Cursor): Veritabanı işaretçisi
        """
        # GAME_RESULTS tablosu
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS game_results (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            timestamp TEXT NOT NULL,
            result TEXT NOT NULL,
            previous_pattern TEXT,
            session_id INTEGER
        )
        ''')
        
        # Diğer gerekli tabloları da oluştur
        # (Önceki koddan aynen kopyalayabilirsiniz)
    
    def disconnect(self):
        """
        Veritabanı bağlantısını kapatır
        """
        if hasattr(self._local, 'connection'):
            self._local.connection.close()
            del self._local.connection
            logger.info("Veritabanı bağlantısı kapatıldı")
    
    def seed_initial_data(self):
        """Veritabanını başlangıç verileriyle doldur"""
        try:
            connection = self._get_connection()
            cursor = connection.cursor()
            
            # Mevcut sonuç sayısını kontrol et
            cursor.execute("SELECT COUNT(*) FROM game_results")
            count = cursor.fetchone()[0]
            
            if count == 0:
                # Örnek sonuçlar ekle
                seed_results = [
                    (datetime.now().isoformat(), 'P'),
                    (datetime.now().isoformat(), 'B'),
                    (datetime.now().isoformat(), 'T'),
                    (datetime.now().isoformat(), 'P'),
                    (datetime.now().isoformat(), 'B')
                ]
                
                cursor.executemany('''
                INSERT INTO game_results (timestamp, result) 
                VALUES (?, ?)
                ''', seed_results)
                
                connection.commit()
                logger.info(f"{len(seed_results)} adet başlangıç verisi eklendi")
            else:
                logger.info(f"Veritabanında zaten {count} adet kayıt mevcut")
        except sqlite3.Error as e:
            logger.error(f"Başlangıç verisi ekleme hatası: {str(e)}")

    # Diğer tüm mevcut metotları aynen bırakabilirsiniz
    # save_result, get_last_n_results, get_all_results vb.